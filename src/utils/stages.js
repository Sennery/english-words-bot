import usersService from './usersService.js';

const botMsgOptions = {
    parse_mode: 'Markdown'
}

const stages = {
    'start': {
        data: {
            regExp: /\/start/,
            message: '–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.',
            wrongValueMessage: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...',
        },
        onSuccess(bot, msg, userId) {
            bot.sendMessage(userId, 'üëã');
            bot.sendMessage(userId, this.data.message);

            const user = usersService.getUser(userId);        
            const nextStage = getNextStage(user.stage);
            usersService.updateStage(user.id, nextStage);

            return nextStage;
        },
        onError(bot, msg, userId) {
            bot.sendMessage(userId, this.data.wrongValueMessage);
        }
    },
    'choose_timeout': {
        data: {
            regExp: /^\d+$/,
            message: '‚è∞ –î–ª—è –Ω–∞—á–∞–ª–∞, —Å –∫–∞–∫–∏–º –ø–µ—Ä–µ—Ä—ã–≤–æ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–ª–æ–≤–∞? (–≤ –¥–Ω—è—Ö)',
            wrongValueMessage: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ... –í–≤–µ–¥–∏ —á–∏—Å–ª–æ',
        },
        onSuccess(bot, msg, userId) {
            const user = usersService.getUser(userId);
            const nextStage = getNextStage(user.stage);
            usersService.updateStage(user.id, nextStage);
            usersService.updateTimeout(user.id, msg.text);
            
            return nextStage;
        },
        onError(bot, msg, userId) {
            bot.sendMessage(userId, this.data.wrongValueMessage);
        },
        onSwitchStage(bot, msg, userId) {
            bot.sendMessage(userId, this.data.message);
        }
    },
    'choose_words_count' : {
        data: {
            regExp: /^\d+$/,
            message: 'üì® –°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∑–∞ —Ä–∞–∑ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å?',
            wrongValueMessage: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ... –í–≤–µ–¥–∏ —á–∏—Å–ª–æ',
        },
        onSuccess(bot, msg, userId) {
            const user = usersService.getUser(userId);
            const nextStage = getNextStage(user.stage);
            usersService.updateStage(user.id, nextStage);
            usersService.updateCountWords(user.id, msg.text);
            
            return nextStage;
        },
        onError(bot, msg, userId) {
            bot.sendMessage(userId, this.data.wrongValueMessage);
        },
        onSwitchStage(bot, msg, userId) {
            bot.sendMessage(userId, this.data.message);
        }
    },
    'working': {
        data: {
            regExp: /\Skip stage/,
            wrongValueMessage: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...',
        },
        onSuccess(bot, msg, userId) {
            const user = usersService.getUser(userId);
            const nextStage = getNextStage(user.stage);
            usersService.updateStage(user.id, nextStage);
            
            return nextStage;
        },
        onError(bot, msg, userId) {
            bot.sendMessage(userId, this.data.wrongValueMessage);
        },
        onSwitchStage(bot, msg, userId) {
            const user = usersService.getUser(userId);
            const resp = '–û—Ç–ª–∏—á–Ω–æ! –¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å: \n*–°–ª–æ–≤* - ' + user.count + ' \n*–ò–Ω—Ç–µ—Ä–≤–∞–ª* (–¥–Ω–µ–π) - ' + user.timeout + '';
            bot.sendMessage(userId, resp, botMsgOptions);
        }
    },
    'words_ended': {
        data: {
            regExp: /\/start/,
            message: '–£—Ä–∞, –ø–æ—Ö–æ–∂–µ —Ç—ã —É–∂–µ –≤—ã—É—á–∏–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞... üòé',
            wrongValueMessage: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...',
        },
        onSuccess(bot, msg, user) {
            bot.sendMessage(user.id, '–£—Å–ø–µ—Ö');

            const nextStage = getNextStage(user.stage);
            usersService.updateStage(user, 'start');
            
            return 'start';
        },
        onError(bot, msg, userId) {
            bot.sendMessage(userId, this.data.wrongValueMessage);
        },
        onSwitchStage(bot, msg, userId) {
            bot.sendMessage(userId, this.data.message);
        }
    }
};

for (let prop in stages) {
    stages[prop].handle = function({ bot, msg = {}, userId, skipTest = false } = {}) {
        const regTest = this.data.regExp.test(msg.text);        
        let nextStage;
        if (regTest || skipTest) {
            nextStage = this.onSuccess?.(bot, msg, userId);
        } else {
            nextStage = this.onError?.(bot, msg, userId);
        }

        if (nextStage) {
            getStage(nextStage).onSwitchStage?.(bot, msg, userId);
        }
    }
}

function getStage(stage) {
    return stages[stage];
}

function getNextStage(stage) {
    let keys = Object.keys(stages);
    let nextIndex = keys.indexOf(stage) + 1;
    let nextStage = keys[nextIndex];
    return nextStage;
}

export { getStage, getNextStage };